# Construct Binary Tree from Inorder and Postorder Traversal 

#include <bits/stdc++.h>
using namespace std;

class TreeNode {
public:
    int val;
    TreeNode *left, *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int, int> rec;
        for (int i = 0; i < inorder.size(); i++) {
            rec[inorder[i]] = i;
        }
        return helper(inorder, postorder, 0, inorder.size() - 1, 0, postorder.size() - 1, rec);
    }

    TreeNode* helper(vector<int>& inorder, vector<int>& postorder,
                     int inStart, int inEnd,
                     int postStart, int postEnd,
                     unordered_map<int, int>& rec) {
        if (inStart > inEnd || postStart > postEnd) return nullptr;

        int val = postorder[postEnd];
        TreeNode* root = new TreeNode(val);
        int idx = rec[val];
        int leftSubtreeSize = idx - inStart;

        root->left = helper(inorder, postorder,
                             inStart, idx - 1,
                             postStart, postStart + leftSubtreeSize - 1,
                             rec);

        root->right = helper(inorder, postorder,
                              idx + 1, inEnd,
                              postStart + leftSubtreeSize, postEnd - 1,
                              rec);

        return root;
    }
};
